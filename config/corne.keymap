/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT_L 0

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        spc: spc {
            compatible = "zmk,behavior-hold-tap";
            label = "SPC";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
        };
    };

    macros {
        aacute: aacute {
            compatible = "zmk,behavior-macro";
            label = "AACUTE";
            #binding-cells = <0>;
            bindings = <&none &kp A>;
        };

        eacute: eacute {
            compatible = "zmk,behavior-macro";
            label = "EACUTE";
            #binding-cells = <0>;
            bindings = <&none &kp E>;
        };

        iacute: iacute {
            compatible = "zmk,behavior-macro";
            label = "IACUTE";
            #binding-cells = <0>;
            bindings = <&none &kp I>;
        };

        oacute: oacute {
            compatible = "zmk,behavior-macro";
            label = "OACUTE";
            #binding-cells = <0>;
            bindings = <&none &kp O>;
        };

        uacute: uacute {
            compatible = "zmk,behavior-macro";
            label = "UACUTE";
            #binding-cells = <0>;
            bindings = <&none &kp U>;
        };

        acirc: acirc {
            compatible = "zmk,behavior-macro";
            label = "ACIRC";
            #binding-cells = <0>;
            bindings = <&none &kp A>;
        };

        ecirc: ecirc {
            compatible = "zmk,behavior-macro";
            label = "ECIRC";
            #binding-cells = <0>;
            bindings = <&none &kp E>;
        };

        icirc: icirc {
            compatible = "zmk,behavior-macro";
            label = "ICIRC";
            #binding-cells = <0>;
            bindings = <&none &kp I>;
        };

        ocirc: ocirc {
            compatible = "zmk,behavior-macro";
            label = "OCIRC";
            #binding-cells = <0>;
            bindings = <&none &kp O>;
        };

        ucirc: ucirc {
            compatible = "zmk,behavior-macro";
            label = "UCIRC";
            #binding-cells = <0>;
            bindings = <&none &kp U>;
        };

        atilde: atilde {
            compatible = "zmk,behavior-macro";
            label = "ATILDE";
            #binding-cells = <0>;
            bindings = <&none &kp A>;
        };

        otilde: otilde {
            compatible = "zmk,behavior-macro";
            label = "OTILDE";
            #binding-cells = <0>;
            bindings = <&none &kp O>;
        };

        ao: ao {
            compatible = "zmk,behavior-macro";
            label = "AO";
            #binding-cells = <0>;
            bindings = <&none &kp A &kp O>;
        };

        oes: oes {
            compatible = "zmk,behavior-macro";
            label = "OES";
            #binding-cells = <0>;
            bindings = <&none &kp O &kp E &kp S>;
        };

        vim_word: vim_word {
            compatible = "zmk,behavior-macro";
            label = "VIM_WORD";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT) &kp LA(RIGHT) &kp LA(LEFT)>;
        };

        previous_line_enter: previous_line_enter {
            compatible = "zmk,behavior-macro";
            label = "PREVIOUS_LINE_ENTER";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT) &kp LS(ENTER) &kp LEFT>;
        };

        vim_I: vim_I {
            compatible = "zmk,behavior-macro";
            label = "VIM_I";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT_ARROW) &to 0>;
        };

        aes: aes {
            compatible = "zmk,behavior-macro";
            label = "AES";
            #binding-cells = <0>;
            bindings = <&none &kp A &kp E &kp S>;
        };

        esc_0: esc_0 {
            compatible = "zmk,behavior-macro";
            label = "ESC_0";
            #binding-cells = <0>;
            bindings = <&to 0 &kp ESCAPE>;
        };

        next_line_enter: next_line_enter {
            compatible = "zmk,behavior-macro";
            label = "NEXT_LINE_ENTER";
            #binding-cells = <0>;
            bindings = <&kp LG(RIGHT) &kp ENTER>;
        };

        thic_arrow: thic_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "THIC_ARROW";
        };

        thin_arrow: thin_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "THIN_ARROW";
        };

        agrave: agrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp A>;
            label = "AGRAVE";
        };

        gte: gte {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp EQUAL>;
            label = "GTE";
        };

        lte: lte {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LTE";
        };
    };

    combos {
        compatible = "zmk,combos";

        RESET {
            bindings = <&esc_0>;
            key-positions = <12 17>;
        };

        toggle_shift {
            bindings = <&caps_word>;
            key-positions = <16 13>;
        };

        RESET_w {
            bindings = <&esc_0>;
            key-positions = <14 15>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            bindings = <
  &kp Q    &kp W            &kp E                   &kp R                  &kp T              &kp Y         &kp U               &kp I                &kp O            &kp P
  &lt 6 A  &hml LEFT_ALT S  &hml LEFT_CONTROL D     &hml LEFT_SHIFT F      &kp G              &kp H         &hmr LEFT_SHIFT J   &hmr LEFT_CONTROL K  &hmr LEFT_ALT L  &hmr LEFT_GUI SEMICOLON
  &kp Z    &kp X            &kp C                   &kp V                  &kp B              &kp N         &kp M               &kp COMMA            &kp DOT          &kp FSLH
                            &mt LEFT_CONTROL MINUS  &spc LEFT_SHIFT SPACE  &lt 1 BACKSPACE    &lt 2 DELETE  &mt LEFT_ALT ENTER  &mt LEFT_GUI SQT
            >;
        };

        NUMSYM {
            bindings = <
  &kp N1     &kp N2     &kp N3    &kp N4    &kp N5       &kp N6     &kp N7    &kp N8    &kp N9    &kp N0
  &kp EXCL   &kp AT     &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR
  &kp GRAVE  &kp EQUAL  &kp LBKT  &kp RBKT  &kp BSLH     &kp TILDE  &kp PLUS  &kp LBRC  &kp RBRC  &kp PIPE
                        &trans    &trans    &trans       &kp DEL    &trans    &trans
            >;
        };

        ARRFUN {
            bindings = <
  &kp TAB       &kp HOME      &kp UP        &kp END       &kp PG_UP        &kp PSCRN   &kp F1  &kp F2   &kp F3   &kp F4
  &kp ESC       &kp LEFT      &kp DOWN      &kp RIGHT     &kp PG_DN        &kp INS     &kp F5  &kp F6   &kp F7   &kp F8
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4     &bt BT_CLR  &kp F9  &kp F10  &kp F11  &kp F12
                              &trans        &trans        &kp BACKSPACE    &trans      &trans  &trans
            >;
        };

        MACRTY {
            bindings = <
  &kp Q    &kp W            &kp E               &kp R                  &kp T              &kp Y         &kp U               &kp I                 &kp O            &kp P
  &lt 6 A  &hml LEFT_ALT S  &hml LEFT_GUI D     &hml LEFT_SHIFT F      &kp G              &kp H         &hmr LEFT_SHIFT J   &hmr LEFT_GUI K       &hmr LEFT_ALT L  &hmr LEFT_CONTROL SEMICOLON
  &kp Z    &kp X            &kp C               &kp V                  &kp B              &kp N         &kp M               &kp COMMA             &kp DOT          &kp FSLH
                            &mt LEFT_GUI MINUS  &spc LEFT_SHIFT SPACE  &lt 0 BACKSPACE    &lt 5 DELETE  &mt LEFT_ALT ENTER  &mt LEFT_CONTROL SQT
            >;
        };

        MACSYM {
            bindings = <
  &kp N1     &kp N2     &kp N3    &kp N4    &kp N5       &kp N6     &kp N7    &kp N8    &kp N9    &kp N0
  &kp EXCL   &kp AT     &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR
  &kp GRAVE  &kp EQUAL  &kp LBKT  &kp RBKT  &kp BSLH     &kp TILDE  &kp PLUS  &kp LBRC  &kp RBRC  &kp PIPE
                        &trans    &trans    &trans       &kp DEL    &trans    &trans
            >;
        };

        MACFUN {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        MOUSE {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
